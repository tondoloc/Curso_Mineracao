pacman::p_load(lars, caret) # Importando bibliotecas
# Importar os dados
data = read.csv("~/Documentos/Mineração/arquivos_de_exercicios_ciencia_dados_fundamentos_mineracao/Cap.7/07_03/winequality-red.csv")
# Definir grupos de variáveis
x <- as.matrix(data[-12])
y <- data[, 12]
# Seleção regressiva de características com o algoritmo de
# eliminação recursiva de características (RFE, um método
# incorporado comumente usado com máquinas
# de vetores de suporte)
ctrl <- rfeControl(method = "repeatedcv",
repeats = 5,
verbose = TRUE,
functions = lmFuncs)
# Isso demora um pouco.
rfe <- rfe(x, y ,
sizes = c(1:11),
rfeControl = ctrl)
# Ver resultados
rfe
# Ver resultados
rfe
# Isso demora um pouco.
rfe <- rfe(x, y ,
sizes = c(1:11),
rfeControl = ctrl)
# Ver resultados
rfe
# Seleção regressiva de características com o algoritmo de
# eliminação recursiva de características (RFE, um método
# incorporado comumente usado com máquinas
# de vetores de suporte)
ctrl <- rfeControl(method = "repeatedcv",
repeats = 5,
verbose = TRUE,
functions = lmFuncs)
# Isso demora um pouco.
rfe <- rfe(x, y ,
sizes = c(1:11),
rfeControl = ctrl)
# Ver resultados
rfe
# Definir grupos de variáveis
x <- as.matrix(data[-12]) # preditoras todas menos ultima coluna
y <- data[, 12] # resposta avaliacao da qualidade
# Seleção regressiva de características com o algoritmo de
# eliminação recursiva de características (RFE, um método
# incorporado comumente usado com máquinas
# de vetores de suporte)
ctrl <- rfeControl(method = "repeatedcv",
repeats = 5,
verbose = TRUE,
functions = lmFuncs)
# Isso demora um pouco.
rfe <- rfe(x, y ,
sizes = c(1:11),
rfeControl = ctrl)
# Ver resultados
rfe
# Manter características identificadas pela RFE
x <- as.matrix(data[rfe$optVariables])
# Regressão stepwise convencional
stepwise <- lars(x,y, type = "stepwise")
# Stagewise: como a stepwise, mas com melhor generalização
forward <- lars(x,y, type = "forward.stagewise")
# LAR: Least Angle Regression, ou regressão de ângulo mínimo
lar <- lars(x,y, type= "lar")
# LASSO: Least Absolute Shrinkage and Selection Operator,
# ou mínimos absolutos reduzidos e operador de seleção
lasso <- lars(x, y, type = "lasso")
# Comparação de modelos
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6])
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp
pacman::p_load(pacman, depmixS4)
# Usaremos o conjunto de dados de amostra "speed"
# do depmixS4
data(speed)
str(speed)
# Gerar gráfico com os dados
plot(ts(speed[, 1:3]), main = "speed data")
# Modelo 1: existe apenas 1 metodo de resposta
# Resposta gaussiana-binomial combinada com 1 estado
model1 <- depmix(list(rt ~ 1, corr ~ 1),
data = speed,
nstates = 1,
family = list(gaussian(),
multinomial("identity")))
fm1 <- fit(model1, verbose = FALSE)
# Modelo 2: HMM com 2 estados e Pacc como covariável
model2 <- depmix(list(rt ~ 1, corr ~ 1),
data = speed,
nstates = 2,
family = list(gaussian(),
multinomial("identity")),
transition = ~ scale(Pacc),
ntimes=c(168, 134, 137))
fm2 <- fit(model2, verbose = FALSE)
# Modelo 3: HMM com 3 estados e Pacc como covariável
model3 <- depmix(list(rt ~ 1,corr ~ 1),
data = speed,
nstates = 3,
family = list(gaussian(),
multinomial("identity")),
transition = ~ scale(Pacc),
ntimes=c(168, 134, 137))
fm3 <- fit(model3, verbose = FALSE)
# Deseja-se o menor BIC (critério de informação bayesiano)
plot(1:3, c(BIC(fm1), BIC(fm2), BIC(fm3)),
ty = "b", xlab = "Model", ylab = "BIC")
pacman::p_load(pacman, tm, SnowballC, dplyr)
# "Jane Eyre", de Charlotte Brontë, publicado em 1847
bookJE <- readLines('JaneEyre.txt')
setwd("~/Documentos/Mineração/arquivos_de_exercicios_ciencia_dados_fundamentos_mineracao/Cap.9/09_03")
# "Jane Eyre", de Charlotte Brontë, publicado em 1847
bookJE <- readLines('JaneEyre.txt')
# "Wuthering Heights" ("O Morro dos Ventos Uivantes",
# em português), de Emily Brontë, também publicado em 1847
bookWH <- readLines('WutheringHeights.txt')
# Corpus preliminar
corpusJE <- Corpus(VectorSource(bookJE)) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(stripWhitespace) %>%
tm_map(stemDocument)
# Criar matrizes termo-documento + eliminar termos esparsos
tdmJE <- DocumentTermMatrix(corpusJE) %>%
removeSparseTerms(1 - (5/length(corpusJE)))
# Calcular e classificar por frequência das palavras
word.freqJE <- sort(colSums(as.matrix(tdmJE)),
decreasing = T)
# Criar tabela de frequências
tableJE <- data.frame(word = names(word.freqJE),
absolute.frequency = word.freqJE,
relative.frequency =
word.freqJE/length(word.freqJE))
# Eliminar as palavras dos nomes das linhas
rownames(tableJE) <- NULL
# Mostrar as 10 palavras mais comuns
head(tableJE, 10)
corpusWH <- Corpus(VectorSource(bookWH)) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(stripWhitespace) %>%
tm_map(stemDocument)
tdmWH <- DocumentTermMatrix(corpusWH) %>%
removeSparseTerms(1 - (5/length(corpusWH)))
word.freqWH <- sort(colSums(as.matrix(tdmWH)),
decreasing = T)
tableWH <- data.frame(word = names(word.freqWH),
absolute.frequency = word.freqWH,
relative.frequency = word.freqWH/length(word.freqWH))
rownames(tableWH) <- NULL
head(tableWH, 10)
write.csv(tableWH[1:1000, ], "WH_1000.csv")
# Exportar as 1000 palavras mais comuns para arquivos CSV
write.csv(tableJE[1:1000, ], "JE_1000.csv")
# Configurar número de dígitos da saída
options(digits = 2)
# Comparar frequência relativa (por subtração)
bronte <- tableJE %>%
merge(tableWH, by = "word") %>%
mutate(dProp =
relative.frequency.x -
relative.frequency.y,
dAbs = abs(dProp)) %>%
arrange(desc(dAbs)) %>%
rename(JE.freq = absolute.frequency.x,
JE.prop = relative.frequency.x,
WH.freq = absolute.frequency.y,
WH.prop = relative.frequency.y)
# Mostrar os 10 termos mais distintos
head(bronte, 10)
# Salvar tabela completa como CSV
write.csv(bronte, "bronte_table.csv")
# Visualizar tabela com todos os resultados
View(bronte)
# Limpar espaço de trabalho
rm(list = ls())
# Limpar pacotes
p_unload(pacman, tm, SnowballC, dplyr)
# Limpar console
cat("\014")  # CTRL+L
